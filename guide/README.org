#+TITLE: WebGL & Three.js

* 第一章 基础概念

一个模型有三个基础部件：
 - 场景：存放物品的容器
 - 相机：观察场景的视点
 - 渲染器：将相机捕获的信息渲染成图像

一个简单的基础的立方体运动代码如下：

#+BEGIN_SRC js
  const scene = new THREE.Scene() const camera = new THREE.PerspectiveCamera(
  75, window.innerWidth / window.innerHeight, 0.1, 1000) const renderer = new
  THREE.WebGLRenderer()

  renderer.setSize(window.innerWidth, window.innerHeight)
   
  document.body.appendChild(renderer.domElement) var geometry = new
  THREE.CubeGeometry(1,1,1) var material = new THREE.MeshBasicMaterial({color:
  0xffffff}) var cube = new THREE.Mesh(geometry, material) scene.add(cube)
  camera.position.z = 5 function render() { requestAnimationFrame(render)
  cube.rotation.x += 0.1 cube.rotation.y += 0.1 renderer.render(scene, camera) }
  render()
 #+END_SRC

当物件变多时，整个系统会变得很乱，因此需要将其结构化，形成一个简单的框架。这样更
利于开发和维护。

* 第二章 点线
** 点
   定义一个点很简单。

   #+BEGIN_SRC js
     new THREE.Vector3(x, y, z) // 或 使用 set 方法const point = new
     THREE.Vector3() point.set(x, y, z)
   #+END_SRC

   坐标系为右手坐标系，x 正向右，y 正向上，z 正向前。

   缺省值为 0。

** 线段
   画一条线段有点复杂。

   *1.首先要声明一个几何体 geometry*
   #+BEGIN_SRC js
     const geometry = new THREE.Geometry()
   #+END_SRC

   #+TODO 为什么要先定义个几何体？Threejs 没有提供单独画点的函数，它必须被放到一
   #个几何体里面

   几何体里有一个 vertices 变量，是个数组，可以用来存放无数个点。

   *2.定义线条的材质*
   #+BEGIN_SRC js
     const material = new THREE.LineBasicMaterial(Object)
   #+END_SRC

   Object 为一个定义材质外观的普通对象， 如 Color，VertexColor 等
   
   *3.将两个端点放入几何体中*
    #+BEGIN_SRC js
     geometry.vertices.push(p1) geometry.vertices.push(p2)
    #+END_SRC

   *4.设置两点的颜色*
   #+BEGIN_SRC js
     geometry.colors.push(new THREE.Color(rgb), new THREE.Color(rgb))
   #+END_SRC

   *5.定义一条线段*
   #+BEGIN_SRC js
     const line = new THREE.Line(geometry, material, THREE.LineSegments)
   #+END_SRC

   *6.添加到场景中*
   #+BEGIN_SRC js
     scene.add(line)
   #+END_SRC
   
* 第三章 渲染
   #+BEGIN_SRC js
     renderer.render(scene, camera)
   #+END_SRC

   每次改变场景中物体的各种属性，都必须重新调用该函数。不然新的场景是不会被自动
   重新渲染的。

   :循环渲染: requestAnimationFrame 函数，参数为下一动画帧调用的函数。

** 动态场景
   1. 通过改变物体的位置属性
   2. 通过改变相机的位置属性

** 性能评估
   :帧数: 图形处理器每秒能刷新几次，通常用 fps(Frame Pre Second) 表示。

   *性能监视器 [[https://github.com/mrdoob/stats.js/][stats.js]]*

   #+BEGIN_SRC js
     const stats = new Stats() stats.setMode(0) // 0: fps, 1: ms
   #+END_SRC

** 动画引擎
   [[https://github.com/tweenjs/tween.js][Tween.js]]

   创建动画：
   #+BEGIN_SRC js
     new TWEEN.Tween(obj.attr).to(obj, time).repeat(times).start()
   #+END_SRC

   使用：
   #+BEGIN_SRC js
     TWEEN.update()
   #+END_SRC
* 第四章 观察（相机）

** 相机
  THREE.Camera 是相机的抽象基类，其子类有两种相机，分别是：
  - 正（交）投影相机 THREE.OrthographicCamera
  - 透视投影相机 THREE.PerspectiveCamera


  *两者的区别*

  - 正交投影： 远近高低比例都相同
  - 透视投影： 有一个基本点，近大远小 
  
*** 正交投影相机
    #+BEGIN_SRC js
      const camera = new THREE.OrthographicCamera( left, right, top, bottom,
        near, far )
    #+END_SRC

    这六个参数定义了一个长方体的六个面。这个长方形被称为 *视景体* 。只有视景体内
    的东西会被相机捕获

*** 透视投影相机

    #+BEGIN_SRC js
      const camera = new THREE.PerspectiveCamera(fov, aspect, near, far)
    #+END_SRC

    - for： 视角
    - aspect： 纵横比
    - near： 近平面
    - far： 远平面


    这四个参数能定义一个六面体。
* 第五章 光源
  光源基类：
  #+BEGIN_SRC js
    const light = new THREE.Light(color)
  #+END_SRC

  由基类派生出来的其他种类光源
  - AmbientLight 环境光
  - AreaLight 区域光
  - DirectionalLight 方向光（平行光）
  - SpotLight 聚光灯
  - PointLight 点光源

** 环境光
   环境光是经过多次反射而来的光，无法确定最初的方向。环境光源放出来的光线可以认
   为是来自任何方向。在场景中指定环境光时，所有的物体无论法向量如何，都将表现为
   同样的明暗程度。

** 点光源

   #+BEGIN_SRC js
     const pointLight = new THREE.PointLight(color, intensity, distance)
   #+END_SRC
   - intensity：光强度，默认为 1.0 （100% 强度的光）
   - distance：光的距离，从光源所在的位置，经过 distance 这段距离后，光的强度将
     从 intensity 衰减为 0，默认为 0.0（光源强度不衰减）

** 聚光灯

   #+BEGIN_SRC js
     const spotLight = new THREE.SpotLight( color, intensity, distance, angle,
       exponent )
   #+END_SRC
   - angle：聚光灯着色的角度，用弧度作为单位，这个角度是和光源的方向形成的角度
   - exponent：衰减的参数，越大衰减越快

** 平行光
   一组没有衰减的平行的光线，类似太阳光的效果。
   #+BEGIN_SRC js
     const directionalLight = new THREE.DirectionalLight(color, intensity)
   #+END_SRC
   
   方向由位置和原点决定。

* 第六章 纹理
  纹理类由 THREE.Texture 表示
  #+BEGIN_SRC js
    const texture = new THREE.Texture( img, mapping, wrapS, wrapT, magFilter,
      minFilter, format, type, anisotropy )
 #+END_SRC

  - img：THREE.ImageUtils.loadTexture(url)
  - mapping：THREE.UVMapping() 表示纹理坐标
  - wrapS/wrapT：表示 x/y 轴的纹理的回环方式
  - magFilter/minFilter：表示过滤的方式
  - format：表示加载的图片格式，THREE.RGBAFormat 或 THREE.RGBFormat
  - type：表示存储纹理的内存的每个字节的格式，默认为无符号类型（THREE.UnsignedByteType)
  - anisotropy：各向异性过滤


  给立方体添加纹理，只需要将纹理放入材质设置中，简单的设置如下所示：
  #+BEGIN_SRC js
    const material = new THREE.MeshBasicMaterial({ map:
    THREE.ImageUtils.loadTexture("./assets/redstone_ore.png") })
  #+END_SRC
* 第七章 网格
  创建一个参考网格：
  #+BEGIN_SRC js
    const gridHelper = new THREE.GridHelper(size, split)
  #+END_SRC
  - size 为网格的边长
  - split 为分割段数

