#+TITLE: WebGL 和 Three.js
#+AUTHOR: zhufuge
#+DATE: <2017-07-15 周六 17:20>

* 第一章 基础概念
** 模型
   一个 3D 世界模型有三个基础部件：
   - 场景：存放物品的容器
   - 相机：观察场景的视点
   - 渲染器：将相机捕获的信息渲染成图像

   一个简单的基础的立方体运动代码如下：
   #+BEGIN_SRC js
  const scene = new THREE.Scene()

  const camera = new THREE.PerspectiveCamera(
    75, window.innerWidth / window.innerHeight, 0.1, 1000
  )
  camera.position.set(0, 0, 5)

  const renderer = new THREE.WebGLRenderer()
  renderer.setSize(window.innerWidth, window.innerHeight)
  document.body.appendChild(renderer.domElement)

  const geometry = new THREE.CubeGeometry(1, 1, 1)
  const material = new THREE.MeshBasicMaterial({color: 0xffffff})
  const cube = new THREE.Mesh(geometry, material)
  scene.add(cube)

  function render() {
    requestAnimationFrame(render)
    cube.rotation.x += 0.1
    cube.rotation.y += 0.1
    renderer.render(scene, camera)
  }
  render()
   #+END_SRC

** 点与坐标系
   #+BEGIN_SRC js
     new THREE.Vector3(x, y, z) // 缺省值为 0
   #+END_SRC

   坐标系为右手坐标系，即 x 正向右，y 正向上，z 正向前。
* 第二章 相机
** 介绍
  THREE.Camera 是相机的抽象基类，其子类有两种相机，分别是：
  - 正（交）投影相机 THREE.OrthographicCamera
  - 透视投影相机 THREE.PerspectiveCamera


  *两者的区别*

  - 正交投影： 远近高低比例都相同
  - 透视投影： 有一个基本点，近大远小 


  *使用场景*
  
  - 一般来说，对于制图、建模软件通常使用正交投影，这样不会因为投影而改变物体比例
  - 对于大多数应用，通常使用透视投影，因为这样更接近人眼的观察效果
  
** 正交投影相机
    #+BEGIN_SRC js
      const camera = new THREE.OrthographicCamera(
        left, right, top, bottom, near, far
      )
    #+END_SRC

    这六个参数定义了一个长方体的六个面。这个长方形被称为 *视景体* 。只有视景体内
    的东西会被相机捕获

** 透视投影相机

    #+BEGIN_SRC js
      const camera = new THREE.PerspectiveCamera(fov, aspect, near, far)
    #+END_SRC

    - for： 视角，视景体竖直方向上的张角（角度制）
    - aspect： 纵横比 (width/height)，相机水平方向和竖直方向长度的比值，通常为
      canvas 的纵横比


    这四个参数能定义一个六面体。
** 设置
   - 位置 =camera.position.set(x, y, z)=
   - 观察点 =camera.lookAt(new THREE.Vector3(x, y, z))= （必须接受一个点的实例）
* 第三章 几何形状
  创建一个物体，需要两个参数：
  1. 几何形状
  2. 材质

  几何形状（Geometry）最主要的功能是存储一个物体的顶点信息。

  由于 three.js 的封装，我们只需要描述形状的特征即可，而不像在原生的 WebGL 中
  需要指明每个点的信息。这使得我们至于要专注于形状的构造，而无需处理繁杂的点信息
** 基本几何形状
*** 立方体 CubeGeometry
    其实是长方体，其构造函数是：
    #+BEGIN_SRC js
      THREE.CubeGeometry(
        width, height, depth, widthSegments, heightSegments, depthSegments
      )
    #+END_SRC

    - width： x 方向上的长度
    - height： y 方向上的长度
    - depth： z 方向上的长度
    - 后三个参数：三个方向上的分段数，一般不需要可以不设置，缺省值为 1

*** 平面 PlaneGeometry
    其实是长方形，而不是数学意义上无限大小的平面，其构造函数是：
    #+BEGIN_SRC js
      THREE.PlaneGeometry(width, height, widthSegments, heightSegments)
    #+END_SRC
    平面是创建在 x 轴和 y 轴所在的平面内的。

    如果想要创建在 x轴和 z 轴所在的平面内，需要通过旋转来实现。
*** 球体 SphereGeometry
    可以是球体球面，也可以是球面的部分，构造函数是：
    #+BEGIN_SRC js
      THREE.SphereGeometry(
        radius, segmentsWidth, segmentsHeight,
        phiStart, phiLength, thetaStart, thetaLength
      )
    #+END_SRC
    - radius：半径
    - segmentsWidth：经度上的切片数（经度被切成了几瓣）
    - segmentsHeight：纬度上的切片数（纬度被切成了几层）
    - phiStart：经度开始的弧度
    - phiLength：经度跨过的弧度
    - thetaStart：纬度开始的弧度
    - thetaLength：纬度跨过的弧度
      

    由于图形的底层实现中，没有曲线的概念，曲线都是由多个折线近似构成的。
    
    切片数是在经度跨过的区域内（开始和跨过属性决定）平均划分的块数
*** 圆形 CircleGeometry
    创建圆形或者扇形，其构造函数是：
    #+BEGIN_SRC js
      THREE.CircleGeometry(radius, segments, thetaStart, thetaLength)
    #+END_SRC
*** 圆柱体 CylinderGeometry    
    圆柱，或者圆台，构造函数是：
    #+BEGIN_SRC js
      THREE.CylinderGeometry(
        radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded
      )
    #+END_SRC
    - radiusTop/radiusBottom：顶面和底面的半径
    - openEnded：一个布尔值，表示是否没有顶面和底面，缺省值为 false
*** 正多面体
    - 正四面体 TetrahedronGeometry
    - 正八面体 OctahedronGeometry
    - 正二十面体 IcosahedronGeometry


    #+BEGIN_SRC js
        THREE.TetrahedronGeometry(radius, detail)
        THREE.OctahedronGeometry(radius, detail)
        THREE.IcosahedronGeometry(radius, detail)
    #+END_SRC
      
    其中，radius 是半径，detail 是细节层次的层数。
*** 圆环面 TorusGeometry
    也就是甜甜圈的形状，其构造函数是：
    #+BEGIN_SRC js
      THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)
    #+END_SRC

    - radius：是圆环的半径
    - tube：是管道半径
    - arc：是圆环面的弧度，缺省值为 =Math.PI * 2=
** 文字形状
   文字形状（TextGeometry）可以用来创建三维的文字形状。

*** 下载使用
    使用文字形状需要下载和引用额外的字体库，具体参见[[https://github.com/mrdoob/three.js/tree/master/examples/fonts][Three.js Github master/examples/fonts]]
    
    在对应网站上传-转换-下载相关字体。

    加载方法：
    #+BEGIN_SRC js
      new THREE.FontLoader().load(font_file, function(font) {
        const mesh = new THREE.Mesh(new THREE.TextGeometry('Hello', {
          font: font,
          size: 1,
          height: 1
        }), material)
        scene.add(mesh)
      })
    #+END_SRC
    
    构造函数是：
    #+BEGIN_SRC js
      THREE.TextGeometry(text, parameters)
    #+END_SRC
** 自定义形状
   自定义形状需要手动指定每个顶点的位置，以及连接情况。构造函数是：
   #+BEGIN_SRC js
     THREE.Geometry()
   #+END_SRC

   添加顶点：
   #+BEGIN_SRC js
     geometry.vertices.push(p_0, p_1, p_2, ...) // p_i = new THREE.Vector3(x, y, z)
     geometry.faces.push(f_0, f_1, ...) // f_i = new THREE.Face3(i, j, k)
   #+END_SRC
   
   =new THREE.Face3(i, j, k)= 创建一个三个顶点组成的面片，参数为顶点数组的点下标。

   复制模型最好用建模软件创建，然后在使用 Three.js 导入到场景中。
* 第四章 材质
  #+BEGIN_QUOTE
  材质（Material）是独立于物体顶点信息之外的与渲染效果相关的属性。通过设置材质可以
  改变物体的颜色、纹理贴图、光照模式等。
  #+END_QUOTE


* 第五章 渲染
   #+BEGIN_SRC js
     renderer.render(scene, camera)
   #+END_SRC

   每次改变场景中物体的各种属性，都必须重新调用该函数。不然新的场景是不会被自动
   重新渲染的。

   :循环渲染: requestAnimationFrame 函数，参数为下一动画帧调用的函数。

** 动态场景
   1. 通过改变物体的位置属性
   2. 通过改变相机的位置属性

** 性能评估
   :帧数: 图形处理器每秒能刷新几次，通常用 fps(Frame Pre Second) 表示。

   *性能监视器 [[https://github.com/mrdoob/stats.js/][stats.js]]*

   #+BEGIN_SRC js
     const stats = new Stats() stats.setMode(0) // 0: fps, 1: ms
   #+END_SRC

** 动画引擎
   [[https://github.com/tweenjs/tween.js][Tween.js]]

   创建动画：
   #+BEGIN_SRC js
     new TWEEN.Tween(obj.attr).to(change_obj, time).repeat(times).start()
   #+END_SRC

   使用：
   #+BEGIN_SRC js
     TWEEN.update()
   #+END_SRC
* 第六章 光源
  光源基类：
  #+BEGIN_SRC js
    const light = new THREE.Light(color)
  #+END_SRC

  由基类派生出来的其他种类光源
  - AmbientLight 环境光
  - AreaLight 区域光
  - DirectionalLight 方向光（平行光）
  - SpotLight 聚光灯
  - PointLight 点光源

** 环境光
   环境光是经过多次反射而来的光，无法确定最初的方向。环境光源放出来的光线可以认
   为是来自任何方向。在场景中指定环境光时，所有的物体无论法向量如何，都将表现为
   同样的明暗程度。

** 点光源

   #+BEGIN_SRC js
     const pointLight = new THREE.PointLight(color, intensity, distance)
   #+END_SRC
   - intensity：光强度，默认为 1.0 （100% 强度的光）
   - distance：光的距离，从光源所在的位置，经过 distance 这段距离后，光的强度将
     从 intensity 衰减为 0，默认为 0.0（光源强度不衰减）

** 聚光灯

   #+BEGIN_SRC js
     const spotLight = new THREE.SpotLight( color, intensity, distance, angle,
       exponent )
   #+END_SRC
   - angle：聚光灯着色的角度，用弧度作为单位，这个角度是和光源的方向形成的角度
   - exponent：衰减的参数，越大衰减越快

** 平行光
   一组没有衰减的平行的光线，类似太阳光的效果。
   #+BEGIN_SRC js
     const directionalLight = new THREE.DirectionalLight(color, intensity)
   #+END_SRC
   
   方向由位置和原点决定。

* 第七章 纹理
  纹理类由 THREE.Texture 表示
  #+BEGIN_SRC js
    const texture = new THREE.Texture( img, mapping, wrapS, wrapT, magFilter,
      minFilter, format, type, anisotropy )
 #+END_SRC

  - img：THREE.ImageUtils.loadTexture(url)
  - mapping：THREE.UVMapping() 表示纹理坐标
  - wrapS/wrapT：表示 x/y 轴的纹理的回环方式
  - magFilter/minFilter：表示过滤的方式
  - format：表示加载的图片格式，THREE.RGBAFormat 或 THREE.RGBFormat
  - type：表示存储纹理的内存的每个字节的格式，默认为无符号类型（THREE.UnsignedByteType)
  - anisotropy：各向异性过滤


  给立方体添加纹理，只需要将纹理放入材质设置中，简单的设置如下所示：
  #+BEGIN_SRC js
    const material = new THREE.MeshBasicMaterial({ map:
    THREE.ImageUtils.loadTexture("./assets/redstone_ore.png") })
  #+END_SRC
* 第八章 网格
  创建一个参考网格：
  #+BEGIN_SRC js
    const gridHelper = new THREE.GridHelper(size, split)
  #+END_SRC
  - size 为网格的边长
  - split 为分割段数

* 参考文献
  - [[http://www.ituring.com.cn/book/1272][Three.js 入门指南 - 张雯莉]]
