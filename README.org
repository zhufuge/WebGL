#+TITLE: WebGL & Three.js

* 第一章 基础概念

一个模型有三个基础部件：
 - 场景：存放物品的容器
 - 相机：观察场景的视点
 - 渲染器：将相机捕获的信息渲染成图像

一个简单的基础的立方体运动代码如下：

#+BEGIN_SRC js
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(
    75, window.innerWidth / window.innerHeight, 0.1, 1000)
  const renderer = new THREE.WebGLRenderer()

  renderer.setSize(window.innerWidth, window.innerHeight)
   
  document.body.appendChild(renderer.domElement)
  var geometry = new THREE.CubeGeometry(1,1,1)
  var material = new THREE.MeshBasicMaterial({color: 0xffffff})
  var cube = new THREE.Mesh(geometry, material)
  scene.add(cube)
  camera.position.z = 5
  function render() {
    requestAnimationFrame(render)
    cube.rotation.x += 0.1
    cube.rotation.y += 0.1
    renderer.render(scene, camera)
  }
  render()
#+END_SRC

当物件变多时，整个系统会变得很乱，因此需要将其结构化，形成一个简单的框架。
这样更利于开发和维护。

* 第二章 点线面
** 点
   定义一个点很简单。

   #+BEGIN_SRC js
     new THREE.Vector3(x, y, z)
     // 或 使用 set 方法
     const point = new THREE.Vector3()
     point.set(x, y, z)
   #+END_SRC

   坐标系为右手坐标系，x 正向右，y 正向上，z 正向前。

   缺省值为 0。

** 线段
   画一条线段有点复杂。

   1. 首先要声明一个几何体 geometry
   #+BEGIN_SRC js
     const geometry = new THREE.Geometry()
   #+END_SRC

   #+TODO 为什么要先定义个几何体？
   #Threejs 没有提供单独画点的函数，它必须被放到一个几何体里面

   几何体里有一个 vertices 变量，是个数组，可以用来存放无数个点。

   2. 定义线条的材质
   #+BEGIN_SRC js
     const material = new THREE.LineBasicMaterial(Object)
   #+END_SRC

   Object 为一个定义材质外观的普通对象， 如 Color，VertexColor 等
   
   3. 将两个端点放入几何体中
   #+BEGIN_SRC js
     geometry.vertices.push(p1)
     geometry.vertices.push(p2)
   #+END_SRC

   4. 设置两点的颜色
   #+BEGIN_SRC js
     geometry.colors.push(new THREE.Color(rgb), new THREE.Color(rgb))
   #+END_SRC

   5. 定义一条线段
   #+BEGIN_SRC js
     const line = new THREE.Line(geometry, material, THREE.LineSegments)
   #+END_SRC

   6. 添加到场景中
   #+BEGIN_SRC js
     scene.add(line)
   #+END_SRC
